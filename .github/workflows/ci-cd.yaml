name: CI/CD Pipeline

on:
  workflow_dispatch:

env:
  DEPLOYMENT_NAME: golang-api-deploy

jobs:
  terraform-apply:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive
      
      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.7'
      
      - name: Configure kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ vars.EKS_CLUSTER_NAME }} --region ${{ vars.AWS_REGION }}
          kubectl get nodes # Verify connection to EKS cluster
      
      - name: Initialize and Apply Terraform
        run: |
          cd terraform
          terraform init -upgrade || exit 1
          terraform plan -var="irsa_role_arn=${{ vars.IRSA_ROLE_ARN }}" -var-file="terraform.tfvars" -out=tfplan || exit 1
          terraform apply -auto-approve tfplan || exit 1
      
      - name: Debug Terraform Outputs
        run: |
          cd terraform
          echo "Terraform outputs for debugging:"
          terraform output
  build-and-deploy:
    name: Build and Deploy App
    needs: terraform-apply
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}