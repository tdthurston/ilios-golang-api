name: CI/CD Pipeline

on:
  workflow_dispatch:

env:
  DEPLOYMENT_NAME: golang-api-deploy

jobs:
  deploy-base-infrastructure:
    name: Deploy Base Infrastructure
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      cluster_name: ${{ steps.infra-outputs.outputs.cluster_name }}
      cluster_endpoint: ${{ steps.infra-outputs.outputs.cluster_endpoint }}
      irsa_role_arn: ${{ steps.infra-outputs.outputs.irsa_role_arn }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive
      
      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.7'
      
      - name: Deploy Base Infrastructure
        run: |
          cd infra
          terraform init -upgrade || exit 1
          terraform plan -var-file="terraform.tfvars" -out=tfplan || exit 1
          terraform apply -auto-approve tfplan || exit 1
      
      - name: Get Infrastructure Outputs
        id: infra-outputs
        run: |
          cd infra
          echo "cluster_name=$(terraform output -raw eks_cluster_name)" >> $GITHUB_OUTPUT
          echo "cluster_endpoint=$(terraform output -raw eks_endpoint)" >> $GITHUB_OUTPUT
          echo "irsa_role_arn=$(terraform output -raw irsa_role_arn)" >> $GITHUB_OUTPUT

  terraform-apply:
    name: Deploy API Infrastructure
    needs: deploy-base-infrastructure
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive
      
      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.7'
      
      - name: Configure kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ needs.deploy-base-infrastructure.outputs.cluster_name }} --region ${{ vars.AWS_REGION }}
          kubectl get nodes # Verify connection to EKS cluster
      
      - name: Initialize and Apply Terraform
        run: |
          cd terraform
          terraform init -upgrade || exit 1
          terraform plan -var="irsa_role_arn=${{ needs.deploy-base-infrastructure.outputs.irsa_role_arn }}" -var-file="terraform.tfvars" -out=tfplan || exit 1
          terraform apply -auto-approve tfplan || exit 1
      
      - name: Debug Terraform Outputs
        run: |
          cd terraform
          echo "Terraform outputs for debugging:"
          terraform output

  build-and-deploy:
    name: Build and Deploy App
    needs: terraform-apply
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      
      - name: Build Go app
        run: |
          go build -o golang-api ./cmd
      
      - name: Test Go app
        run: |
          go test -v ./...
      
      - name: Build and Push Docker image
        run: |
          aws ecr get-login-password --region ${{ vars.AWS_REGION }} | docker login --username AWS --password-stdin ${{ vars.ECR_REPOSITORY_URI }}
          docker build -t golang-api:latest .
          docker tag golang-api:latest ${{ vars.ECR_REPOSITORY_URI }}:latest
          docker push ${{ vars.ECR_REPOSITORY_URI }}:latest
      
      - name: Deploy to EKS
        run: |
          aws eks update-kubeconfig --name ${{ needs.deploy-base-infrastructure.outputs.cluster_name }} --region ${{ vars.AWS_REGION }}
          kubectl rollout restart deployment ${{ env.DEPLOYMENT_NAME }}
      
      - name: Verify deployment
        run: |
          kubectl get deployment ${{ env.DEPLOYMENT_NAME }}
          kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }}